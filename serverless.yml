service: sls-website 

plugins:
  - serverless-s3-sync

provider:
  name: aws
  runtime: python3.6
  versionFunctions: false
  stage: dev
  region: ap-south-1
  

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "uploadBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "sns:publish"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"

custom:
  siteName: serverless-cp.com
  aliasHostedZoneId: Z3AQBSTGFYJSTF    # us-east-1
  aliasDNSName: s3-website-us-east-1.amazonaws.com
  s3Sync:
    - bucketName:  ${self:service}-${self:provider.stage}-uploads
      localDir: www

functions:         
  weblink2:
    handler: lambda_functions/signup.lambda_handler
    memorySize: 128
    description: My function
    events:
        - http:
            path: lambda_functions/signup
            method: POST  
            cors: true
        - http:
            path: lambda_functions/login
            method: POST
            cors: true
        - http:
            path: lambda_functions/upload
            method: GET
            cors: true
            

resources:
  Resources:
      uploadBucket:
          Type: AWS::S3::Bucket
          Properties:
              BucketName: ${self:service}-${self:provider.stage}-uploads
              AccessControl: PublicRead
              CorsConfiguration:
                  CorsRules:
                  - AllowedMethods:
                    - GET
                    - PUT
                    - POST
                    - HEAD
                    AllowedOrigins:
                    - "*"
                    AllowedHeaders:
                    - "*"
              WebsiteConfiguration:
                IndexDocument: signup.html
                ErrorDocument: error.html
              PolicyDocument:
                Statement:
                  - Sid: PublicReadGetObject
                    Effect: Allow
                    Principal: "*"
                    Action:
                    - s3:GetObject
                    Resource:
                      Fn::Join: [
                        "", [
                          "arn:aws:s3:::",
                          {
                            "Ref": "uploadBucket"
                          },
                          "/*"
                        ]
                      ]

      TestDynamoDbTable:
          Type: 'AWS::DynamoDB::Table'
          DeletionPolicy: Retain
          Properties:
            AttributeDefinitions:
              -
                AttributeName: password
                AttributeType: S
              -
                AttributeName: user_name
                AttributeType: S
            KeySchema:
              -
                AttributeName: password
                KeyType: HASH
              -
                AttributeName: user_name
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            TableName: ${self:service}-${self:provider.stage}-table1
            



